"""
Django settings for Website project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

# Imports
from pathlib import Path
import os
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BUILD_DIR = BASE_DIR / 'build'
DATA_DIR = BASE_DIR / 'data'


## Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!7j4#xg35po4e)dx06a5qj2qp3d58le(j02#jo3wdp^wqnjk6!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Determine Environment
MODE = os.getenv('MODE')

# Turn debug mode off if in production mode
if MODE == "PRODUCTION": DEBUG = False

ALLOWED_HOSTS = ["*"]

## Application definition

INSTALLED_APPS = [
    # Django-CRA-Helper Extension
    'cra_helper',
    'whitenoise.runserver_nostatic',

    # Default Extensions
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
   
    # Third Party Extensions
    'django_filters',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django_extensions',
    'django_db_logger',
    'dynamic_preferences',

     # Internal Extensions
    'app',

]

MIDDLEWARE = [
    # Whitenoise
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # Default Middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cra_helper.context_processors.static',
                'dynamic_preferences.processors.global_preferences',
            ],
        },
    },
]

WSGI_APPLICATION = 'Website.wsgi.application'


## Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATA_DIR / 'db.sqlite3',
    }
}


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## Logging
# https://docs.djangoproject.com/en/4.0/ref/settings/#logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'db_log': {
            'level': 'DEBUG',
            'class': 'django_db_logger.db_log_handler.DatabaseLogHandler'
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'db': {
            'handlers': ['db_log', 'console',],
            'level': 'DEBUG'
        },
        'django.request': {
            'handlers': ['db_log', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['db_log', 'console'],
            'level': 'ERROR',
            'propagate': True,
        }
    }
}


## Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


## Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


## Media Files
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url

# URL that handles the media served from MEDIA_ROOT, used for managing stored files. 
MEDIA_ROOT = DATA_DIR / 'media'

# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_URL = "/media/"


## Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# Set URL for static files
STATIC_URL = 'static/'

# Set root directory for static files collected
STATIC_ROOT = DATA_DIR / 'staticfiles'

# Set static file locations
STATICFILES_DIRS = [BUILD_DIR, ]

# Whitenoise: Add compression and caching support
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Django-CRA-Helper: Modify Staticfinders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',  # Required for CRAManifestFinder below to work
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'cra_helper.finders.CRAManifestFinder',                 # A finder to pull in asset-manifest.json
]

## Whitenoise Settings
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_AUTOREFRESH = True

# Django-CRA-Helper: Settings
CRA_APP_NAME = '.'
CRA_HOST = 'localhost'  # Host for create-react-app server (inside docker)
CRA_PORT = 3000         # Port for create-react-app server (inside docker)


# Django REST Framework
# https://github.com/encode/django-rest-framework

# JWT Settings
SIMPLE_JWT = {

    # How long the original token is valid for. Setting it for 2 hours.
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(hours=2),

}

# REST Settings
REST_FRAMEWORK = {

    # The default class to use for queryset pagination.
    'DEFAULT_PAGINATION_CLASS': 'app.pagination.PageNumberWithPageSizePagination',
    'PAGE_SIZE': 10,

    # A list of filter backend classes that should be used for generic filtering.
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.OrderingFilter',
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],

    # A list or tuple of authentication classes, that determines the default set of authenticators 
    # used when accessing the request.user or request.auth properties.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # SessionAuthentication is intentionally removed, see: https://github.com/encode/django-rest-framework/issues/6104'
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    # A list or tuple of permission classes, that determines the default set of permissions checked at the start of a view.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],

    # A list or tuple of parser classes, that determines the default set of parsers used when accessing the request.data property.
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ]

}

# Django Dynamic Preferences
DYNAMIC_PREFERENCES = {

    # a python attribute that will be added to model instances with preferences
    # override this if the default collide with one of your models attributes/fields
    'MANAGER_ATTRIBUTE': 'preferences',

    # The python module in which registered preferences will be searched within each app
    'REGISTRY_MODULE': 'preferences',

    # Allow quick editing of preferences directly in admin list view
    # WARNING: enabling this feature can cause data corruption if multiple users
    # use the same list view at the same time, see https://code.djangoproject.com/ticket/11313
    'ADMIN_ENABLE_CHANGELIST_FORM': False,

    # Customize how you can access preferences from managers. The default is to
    # separate sections and keys with two underscores. This is probably not a settings you'll
    # want to change, but it's here just in case
    'SECTION_KEY_SEPARATOR': '__',

    # Use this to disable auto registration of the GlobalPreferenceModel.
    # This can be useful to register your own model in the global_preferences_registry.
    'ENABLE_GLOBAL_MODEL_AUTO_REGISTRATION': True,

    # Use this to disable caching of preference. This can be useful to debug things
    'ENABLE_CACHE': True,

    # Use this to select which chache should be used to cache preferences. Defaults to default.
    'CACHE_NAME': 'default',

    # Use this to disable checking preferences names. This can be useful to debug things
    'VALIDATE_NAMES': True,
}
